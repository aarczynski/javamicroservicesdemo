services:
  app-company:
    container_name: app-company
    build:
      context: ./app-company
      dockerfile: docker/Dockerfile
    command: [ "java",
               "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005",
               "-javaagent:./opentelemetry-javaagent.jar",
               "-jar", "./app-company.jar" ]
    environment:
      OTEL_SERVICE_NAME: "app-company"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_METRIC_EXPORT_INTERVAL: "1000"
      OTEL_INSTRUMENTATION_SPRING_BOOT_ACTUATOR_AUTOCONFIGURE_ENABLED: true
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
      OTEL_INSTRUMENTATION_COMMON_EXPERIMENTAL_CONTROLLER_TELEMETRY_ENABLED: true
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
#      otel-collector:
#        condition: service_healthy # TODO: replace prometheus, loki, tempo deps when OTEL collector healthcheck is fixed
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "2.00"
  app-company-client:
    container_name: app-company-client
    build:
      context: ./app-company-client
      dockerfile: docker/Dockerfile
    command: [ "java",
               "-javaagent:./opentelemetry-javaagent.jar",
               "-jar", "./app-company-client.jar" ]
    environment:
      OTEL_SERVICE_NAME: "app-company-client"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_METRIC_EXPORT_INTERVAL: "1000"
      OTEL_INSTRUMENTATION_SPRING_BOOT_ACTUATOR_AUTOCONFIGURE_ENABLED: true
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
      OTEL_INSTRUMENTATION_COMMON_EXPERIMENTAL_CONTROLLER_TELEMETRY_ENABLED: true
    ports:
      - "8081:8080"
    depends_on:
#      otel-collector:
#        condition: service_healthy # TODO: replace prometheus, loki, tempo deps when OTEL collector healthcheck is fixed
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "2.00"

  postgres:
    container_name: app-company-db
    image: postgres:17.4
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=app-company-db
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "2.00"

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.115.1
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./observability/otel-collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "http://localhost:8888" ]
#      interval: 5s
#      timeout: 3s
#      retries: 10

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.2.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:9090" ]
      interval: 5s
      timeout: 3s
      retries: 10

  loki:
    container_name: loki
    image: grafana/loki:3.4.2
    command:
      - -config.file=/etc/loki/loki.yml
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/loki.yml:/etc/loki/loki.yml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3100/ready" ]
      interval: 5s
      timeout: 3s
      retries: 10

  tempo:
    container_name: tempo
    image: grafana/tempo:2.7.2
    command:
      - -config.file=/etc/tempo.yml
    ports:
      - "3200:3200"
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo.yml
    healthcheck:
      interval: 5s
      retries: 10
      test: [ "CMD", "wget", "--spider", "http://localhost:3200/ready" ]

  grafana:
    container_name: grafana
    image: grafana/grafana:11.6.0
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
