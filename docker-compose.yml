version: '3.9'

services:
  company-app:
    container_name: company-app
    build:
      context: ./company
      dockerfile: docker/Dockerfile
    command: [ "java", "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005", "-jar", "./company-app.jar" ]
    ports:
      - '8080:8080'
      - '5005:5005'
    networks:
      - microservices-demo-network
    depends_on:
      company-app-db:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '6.00'

  company-app-db:
    container_name: company-db
    image: postgres:15.5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=microservicesdemodb
    ports:
      - '5432:5432'
    networks:
      - microservices-demo-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.00'

  prometheus:
    container_name: company-prometheus
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-demo-network

  loki:
    container_name: company-loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/loki.yml:/etc/loki/local-config.yaml
    networks:
      - microservices-demo-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3100/ready" ]
      interval: 5s
      timeout: 3s
      retries: 10

  tempo:
    container_name: company-tempo
    image: grafana/tempo:2.3.1
    command: [ "-config.file=/etc/tempo.yml" ]
    ports:
      - "3200:3200"
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo.yml
    networks:
      - microservices-demo-network
    healthcheck:
      interval: 5s
      retries: 10
      test: [ "CMD", "wget", "--spider", "http://localhost:3200/status" ]

  grafana:
    container_name: company-grafana
    image: grafana/grafana:10.2.2
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - microservices-demo-network

networks:
  microservices-demo-network:
